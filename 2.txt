2. Create and rotate a triangle about the origin and a fixed point.
#include<stdio.h>
#include<math.h>
#include<GL/glut.h>
GLfloat t[3][5] = { { 10,20,20,15,10 },{ 10,10,20,30,20 },{ 1,1,1,1 } };
GLfloat rt[3][3] = { { 0 },{ 0 },{ 0 } };
GLfloat res[3][9] = { { 0 },{ 0 },{ 0 } };
GLfloat xr = 10;
GLfloat yr = 20;
GLfloat th;
GLint ch;
void multiply()
{
	int i, j, k;
	for (i = 0; i<3; i++)
		for (j = 0; j<9; j++)
		{
			res[i][j] = 0;
			for (k = 0; k<3; k++)
				res[i][j] = res[i][j] + rt[i][k] * t[k][j];
		}
}
void rotate_about_origin()
{
	GLfloat m, n;
	m = xr*(1 - cos(th)) + yr*sin(th);//Rotation about pivot point formula(Composite Transformation )
	n = yr*(1 - cos(th)) - xr*sin(th);
              rt[0][0] = cos(th);
	rt[0][1] = -sin(th);
	rt[0][2] = 0;
	rt[1][0] = sin(th);
	rt[1][1] = cos(th);
	rt[1][2] = 0;
	rt[2][0] = 0;
	rt[2][1] = 0;
	rt[2][2] = 1;
              multiply();

}
void rotate_about_fixed_point()
{
	GLfloat m, n;
	m = xr*(1 - cos(th)) + yr*sin(th);
	n = yr*(1 - cos(th)) - xr*sin(th);

	rt[0][0] = cos(th);
	rt[0][1] = -sin(th);
	rt[0][2] = m;
	rt[1][0] = sin(th);
	rt[1][1] = cos(th);
	rt[1][2] = n;
	rt[2][0] = 0;
	rt[2][1] = 0;
	rt[2][2] = 1;

	multiply();

}
void draw_triangle()
{
	glLineWidth(5);
	glBegin(GL_LINE_LOOP);
	glColor3f(1, 0, 0);
	glVertex2f(t[0][0], t[1][0]);
	glColor3f(0, 1, 0);
	glVertex2f(t[0][1], t[1][1]);
	glColor3f(0, 0, 1);
	glVertex2f(t[0][2], t[1][2]);

	glEnd();
	glFlush();
}
void draw_rotated_triangle()
{

	glLineWidth(5);
	glBegin(GL_LINE_LOOP);
	glColor3f(1, 0, 0);
	glVertex2f(res[0][0], res[1][0]);
	glColor3f(0, 1, 0);
	glVertex2f(res[0][1], res[1][1]);
	glColor3f(0, 0, 1);
	glVertex2f(res[0][2], res[1][2]);
	glEnd();
	glFlush();
}
void display()
{
	glClear(GL_COLOR_BUFFER_BIT);
	if (ch == 1)
	{
		draw_triangle();
		rotate_about_origin();
		draw_rotated_triangle();
		glFlush();
	}
	if (ch == 2)
	{
		draw_triangle();
		rotate_about_fixed_point();
		draw_rotated_triangle();
		glFlush();
	}
}
void myinit()
{
	glClearColor(1, 1, 1, 1);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluOrtho2D(-50, 50, -50, 50);
}

int main(int argc, char ** argv)
{
printf("***Rotation***\n1.Rotation about origin\n2.Rotation about a fixed point(xr,yr)\n");
	printf("Enter the choice\n");
	scanf_s("%d", &ch);
	printf("Enter rotation angle\n");
	scanf_s("%f", &th);
	th = th*3.14 / 180;
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
	glutInitWindowSize(500, 500);
	glutInitWindowPosition(0, 0);
	glutCreateWindow("Demo");
	glutDisplayFunc(display);
	myinit();
	glutMainLoop();
	return 0;
}
Output



























